"""autogenerated by genpy from icp_lrf/Lines.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class Lines(genpy.Message):
  _md5sum = "5e886f1edefc993f520f05d33f4e8b92"
  _type = "icp_lrf/Lines"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32[] theta_index
float32[] est_rho
float32[] est_theta
float32[] delta_rho
geometry_msgs/Polygon[] endpoints
geometry_msgs/Polygon[] lengths
geometry_msgs/Polygon[] endpoint_ranges
geometry_msgs/Polygon[] theta

================================================================================
MSG: geometry_msgs/Polygon
#A specification of a polygon where the first and last points are assumed to be connected
Point32[] points

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
"""
  __slots__ = ['theta_index','est_rho','est_theta','delta_rho','endpoints','lengths','endpoint_ranges','theta']
  _slot_types = ['int32[]','float32[]','float32[]','float32[]','geometry_msgs/Polygon[]','geometry_msgs/Polygon[]','geometry_msgs/Polygon[]','geometry_msgs/Polygon[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       theta_index,est_rho,est_theta,delta_rho,endpoints,lengths,endpoint_ranges,theta

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Lines, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.theta_index is None:
        self.theta_index = []
      if self.est_rho is None:
        self.est_rho = []
      if self.est_theta is None:
        self.est_theta = []
      if self.delta_rho is None:
        self.delta_rho = []
      if self.endpoints is None:
        self.endpoints = []
      if self.lengths is None:
        self.lengths = []
      if self.endpoint_ranges is None:
        self.endpoint_ranges = []
      if self.theta is None:
        self.theta = []
    else:
      self.theta_index = []
      self.est_rho = []
      self.est_theta = []
      self.delta_rho = []
      self.endpoints = []
      self.lengths = []
      self.endpoint_ranges = []
      self.theta = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.theta_index)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.theta_index))
      length = len(self.est_rho)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.est_rho))
      length = len(self.est_theta)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.est_theta))
      length = len(self.delta_rho)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.delta_rho))
      length = len(self.endpoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.endpoints:
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
      length = len(self.lengths)
      buff.write(_struct_I.pack(length))
      for val1 in self.lengths:
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
      length = len(self.endpoint_ranges)
      buff.write(_struct_I.pack(length))
      for val1 in self.endpoint_ranges:
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
      length = len(self.theta)
      buff.write(_struct_I.pack(length))
      for val1 in self.theta:
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.endpoints is None:
        self.endpoints = None
      if self.lengths is None:
        self.lengths = None
      if self.endpoint_ranges is None:
        self.endpoint_ranges = None
      if self.theta is None:
        self.theta = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.theta_index = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.est_rho = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.est_theta = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.delta_rho = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.endpoints = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Polygon()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point32()
          _x = val2
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
          val1.points.append(val2)
        self.endpoints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lengths = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Polygon()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point32()
          _x = val2
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
          val1.points.append(val2)
        self.lengths.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.endpoint_ranges = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Polygon()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point32()
          _x = val2
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
          val1.points.append(val2)
        self.endpoint_ranges.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.theta = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Polygon()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point32()
          _x = val2
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
          val1.points.append(val2)
        self.theta.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.theta_index)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.theta_index.tostring())
      length = len(self.est_rho)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.est_rho.tostring())
      length = len(self.est_theta)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.est_theta.tostring())
      length = len(self.delta_rho)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.delta_rho.tostring())
      length = len(self.endpoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.endpoints:
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
      length = len(self.lengths)
      buff.write(_struct_I.pack(length))
      for val1 in self.lengths:
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
      length = len(self.endpoint_ranges)
      buff.write(_struct_I.pack(length))
      for val1 in self.endpoint_ranges:
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
      length = len(self.theta)
      buff.write(_struct_I.pack(length))
      for val1 in self.theta:
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.endpoints is None:
        self.endpoints = None
      if self.lengths is None:
        self.lengths = None
      if self.endpoint_ranges is None:
        self.endpoint_ranges = None
      if self.theta is None:
        self.theta = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.theta_index = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.est_rho = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.est_theta = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.delta_rho = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.endpoints = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Polygon()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point32()
          _x = val2
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
          val1.points.append(val2)
        self.endpoints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lengths = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Polygon()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point32()
          _x = val2
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
          val1.points.append(val2)
        self.lengths.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.endpoint_ranges = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Polygon()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point32()
          _x = val2
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
          val1.points.append(val2)
        self.endpoint_ranges.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.theta = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Polygon()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point32()
          _x = val2
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
          val1.points.append(val2)
        self.theta.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3f = struct.Struct("<3f")
